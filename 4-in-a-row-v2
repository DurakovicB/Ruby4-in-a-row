class Board
  @@board = []
  @@rows = 6
  @@columns = 7

  def initialize(*args)
<<<<<<< HEAD
    if args[0]==0
=======
    if args[0].is_a? Numeric
>>>>>>> ee1629bc6314a56cd139e485b0537fa134ea2b4a
      # perform initialization in first case
      @@board = empty_board()
      @@rows = @@board[1].length
      @@columns = @@board.length
<<<<<<< HEAD
    elsif args[0]==1
      @@board = loadBoard()
      @@rows = @@board[1].length
      @@columns = @@board.length
=======
    elsif args[0].is_a? String
    # perform initialization in second case
>>>>>>> ee1629bc6314a56cd139e485b0537fa134ea2b4a
    else
      raise TypeError
    end
  end
  # printing the Board
  def print_board()
    i = 0
    while i < @@rows
      j = 0
      while j < @@columns
        print(' [')
        if @@board[j][i] == 0
          print('-')
        elsif @@board[j][i] == 1
          print('X')
        elsif (@@board[j][i] == 2)
          print('O')
        end
        print('] ')
        j += 1
      end
      puts ''
      i += 1
    end
    columncounter = 1
    string = '  '
    while columncounter <= @@columns
      if columncounter < 9
        string += columncounter.to_s
        string += '.   '
      else
        string += columncounter.to_s
        string += '.  '
      end
      columncounter += 1
    end
    puts(string)
  end

<<<<<<< HEAD
  def update_column(column,player)
    i=column.length-1
    while (i>0 && column[i]!=0) do
      i-=1
    end
    column[i]=player
  end

=======
>>>>>>> ee1629bc6314a56cd139e485b0537fa134ea2b4a
  def empty_board()
    while true
      puts "\e[H\e[2J"
      print 'Enter board width:'
      rows = gets.chomp.to_i
      print 'Enter board width:'
      columns = gets.chomp.to_i
      break if (rows >= 6 && columns >= 7) && ((columns - rows).abs <= 2)
    end
    board = Array.new(columns) { Array.new(rows) { 0 } }
    return board
  end
<<<<<<< HEAD

  def loadBoard()

  file = File.open("reload.txt")
  read_arrays = file.read.split("W")
  playeronemoves = read_arrays[0].tr('[]', '').split(",")
#  playeronemoves
  playertwomoves = read_arrays[1].tr('[]', '').split(",")
  rows = read_arrays[2].to_i
  columns = read_arrays[3].to_i
  board = Array.new(columns) { Array.new(rows) { 0 } }
  i=0
  while (i<playeronemoves.length)
    update_column(@@board[playeronemoves[i].to_i],1)
    if( @@board[playertwomoves[i].to_i]==nil )
      break
    else
        update_column( @@board[playertwomoves[i].to_i],2)
    end

    i+=1
  end
end



end

board1=Board.new(1)
=======
end

board1=Board.new(0)
>>>>>>> ee1629bc6314a56cd139e485b0537fa134ea2b4a
board1.print_board()
