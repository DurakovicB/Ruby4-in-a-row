puts "\e[H\e[2J"
#0 represents an empty field, 1 represents the first player's move, and 2 represents the second player's moves

def print_board(board)
  i=0
  while i<board[1].length do
       j=0
       while j<board.length do
         print(" [")
         if (board[j][i]==0)
           print("-")
         elsif board[j][i]==1
           print("X")
         elsif board[j][i]=2
            print("O")
          end

          print("] ")
         j+=1
       end

       puts ""
       i+=1
     end

     rowcounter=1
     string="  "
     while (rowcounter<=board.length)
       if (rowcounter<9)
       string+=rowcounter.to_s
       string+=".   "
       else
         string+=rowcounter.to_s
         string+=".  "
       end
       rowcounter+=1
     end
     puts(string)
end

def loadBoard(location)

  file = File.open("reload.txt")
  read_arrays = file.read.split("W")
  playeronemoves = read_arrays[0].tr('[]', '').split(",")
#  playeronemoves
  print(playeronemoves)
  playertwomoves = read_arrays[1].tr('[]', '').split(",")
  print(playertwomoves)
  rows = read_arrays[2].to_i
  print rows
  columns = read_arrays[3].to_i
  print columns
  board = Array.new(columns) { Array.new(rows) { 0 } }
  i=0
  while (i<playeronemoves.length)
    update_column(board[playeronemoves[i].to_i],1)
    if( board[playertwomoves[i].to_i]==nil )
      break
    else
        update_column(board[playertwomoves[i].to_i],2)
    end

    i+=1
  end
  puts ("")
  print_board(board)
  sleep(5)
  return board
end

def update_column(column,player)
  i=column.length-1
  while (i>0 && column[i]!=0) do
    i-=1
  end
  column[i]=player
end

def full_row?(row)
  i=0
  while (i<row.length)
    if row[i]==0
      return false
    end
    i+=1
  end
return true
end

def diagonal_checker?(board,player)
  i=0
  j=0
  while i<=board.length
    while j<=board[1].length
	   if positive_diagonal(board,i,j,player) || negative_diagonal(board,i,j,player)
		     return true
	      end
        j+=1;
    end
  i+=1
  end
end

def positive_diagonal(board,row, column, symbol)
	counter = 0
	i = row
	j = column
	while ((i>=0) && (j<board.length))
		if board[i][j] == symbol
			counter+=1
			i-=1
			j+=1
		else
			break
		end
	end
	row+=1
	column-=1
	while row<board.length && column>=0
		if board[row][column] == symbol
			counter+=1
			row+=1
			column-=1
		else
			break
		end
	end
	if counter==4
		return true
	else
		return false
	end
end

def negative_diagonal(board,row, column, symbol)
	counter = 0
	i = row
	j = column
	while i<board.length && j<board[1].length
		if board[i][j] == symbol
			counter+=1
			i+=1
			j+=1
		else
			break
		end
	end
	row-=1
	column-=1
	while row>=0 && column>=0
		if board[row][column] == symbol
			counter+=1
			row-=1
			column-=1
		else
			break
		end
	end
	if counter==4
		return true
	else
		return false
	end
end


def vertical_winning_condition_for_player?(board,player)
  i=0
  while (i<board.length) do
    if(winning_column_for_player?(board[i],player))
      return true
    end
    i+=1
  end
  return false
end

def horizontal_winning_condition_for_player?(board,player)
  transposed_board = board.transpose
  #print_board(transposed_board)
  i=transposed_board.length-1
  while (i>=0) do
    if(winning_row_for_player?(transposed_board[i],player))
      return true
    end
    i-=1
  end
end

def winning_column_for_player?(column,player)
i=column.length-1
counter=0
while ( i>=0 && column[i]!=0)
  if column[i]==player
    counter+=1
    return true if counter==4
  else
    counter=0
  end
  i-=1
end
return false
end


def winning_row_for_player?(row,player)
i=0
counter=0
while ( i<row.length-1)
  if row[i]==player
    counter+=1
    return true if counter==4
  else
    counter=0
  end
  i+=1
end
return false
end

def empty_board()
  while true
    puts "\e[H\e[2J"
    print "Enter board width:"
    rows = gets.chomp.to_i
    print "Enter board width:"
    columns = gets.chomp.to_i
    if( (rows>=6 && columns>=7) && ((columns-rows).abs <=2 ) )
      break
    else
      end
  end
  board = Array.new(columns) { Array.new(rows) { 0 } }
  return board
end

def play_game(board)
  ###adjust for alredy loaded game!!!!!!!!!!!TODO

current_player=1
total_moves =0
playeronemoves = Array.new()
playertwomoves = Array.new()

while true do
  puts "\e[H\e[2J"
  print_board(board)
  puts "P1:"+playeronemoves.to_s
  puts "P2:"+playertwomoves.to_s
  print " Player"+current_player.to_s+"'s turn:"

   while true
     input=gets.chomp.downcase
     if(input=='save')
       File.delete('reload.txt') if File.exist?("reload.txt")

       #SAVING BOARD

         File.write('reload.txt',(playeronemoves.to_s+ "W" + playertwomoves.to_s + "W" + rows.to_s + "W" +columns.to_s))

       #BOARD SAVED
       puts "\e[H\e[2J"
       print_board(board)
       print " Player"+current_player.to_s+"'s turn:"
       input = gets
     end
     selected_column =input.to_i-1
     #print(selected_column)
    if(selected_column.to_i<=board.length && selected_column.to_i>=0 && !full_row?(board[selected_column]))
      break
    else
      print(" Please enter a valid row:")
    end
   end
   total_moves+=1
   if(current_player==1)
     playeronemoves.append(selected_column+1)
   else
     playertwomoves.append(selected_column+1)
   end
   update_column(board[selected_column],current_player)
   print_board(board)


if (horizontal_winning_condition_for_player?(board,current_player) or vertical_winning_condition_for_player?(board,current_player) or diagonal_checker?(board,current_player))
  puts "\e[H\e[2J"
  print_board(board)
  puts ("Player"+current_player.to_s+" has won the game!")
  break
end

if(total_moves==board.length * board[1].length)
  puts "\e[H\e[2J"
  print_board(board)
  puts(" It's a draw!")
  break
end

if current_player==1
  current_player=2
elsif current_player==2
  current_player=1
end

end

end

puts("Would you like to continue the last saved game?")
input=gets.chomp.downcase
if(input!="y" && input!="yes")
  play_game(empty_board())
else
  play_game(loadBoard("moves.txt"))
end

while(true)
  print("Would you like to play again? ")
  input=gets.chomp.downcase
  if(input=="y" || input=="yes")
    play_game(empty_board)
  else
    break
  end
end
